/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.effyroth.core.services;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestService {

  public interface Iface {

    public com.effyroth.core.structs.TestObject testMethod(long testLong, String testString, boolean testBool) throws com.effyroth.core.exceptions.TestException, org.apache.thrift.TException;

    public String testPing() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void testMethod(long testLong, String testString, boolean testBool, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testMethod_call> resultHandler) throws org.apache.thrift.TException;

    public void testPing(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testPing_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.effyroth.core.structs.TestObject testMethod(long testLong, String testString, boolean testBool) throws com.effyroth.core.exceptions.TestException, org.apache.thrift.TException
    {
      send_testMethod(testLong, testString, testBool);
      return recv_testMethod();
    }

    public void send_testMethod(long testLong, String testString, boolean testBool) throws org.apache.thrift.TException
    {
      testMethod_args args = new testMethod_args();
      args.setTestLong(testLong);
      args.setTestString(testString);
      args.setTestBool(testBool);
      sendBase("testMethod", args);
    }

    public com.effyroth.core.structs.TestObject recv_testMethod() throws com.effyroth.core.exceptions.TestException, org.apache.thrift.TException
    {
      testMethod_result result = new testMethod_result();
      receiveBase(result, "testMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testMethod failed: unknown result");
    }

    public String testPing() throws org.apache.thrift.TException
    {
      send_testPing();
      return recv_testPing();
    }

    public void send_testPing() throws org.apache.thrift.TException
    {
      testPing_args args = new testPing_args();
      sendBase("testPing", args);
    }

    public String recv_testPing() throws org.apache.thrift.TException
    {
      testPing_result result = new testPing_result();
      receiveBase(result, "testPing");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testPing failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void testMethod(long testLong, String testString, boolean testBool, org.apache.thrift.async.AsyncMethodCallback<testMethod_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testMethod_call method_call = new testMethod_call(testLong, testString, testBool, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testMethod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long testLong;
      private String testString;
      private boolean testBool;
      public testMethod_call(long testLong, String testString, boolean testBool, org.apache.thrift.async.AsyncMethodCallback<testMethod_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.testLong = testLong;
        this.testString = testString;
        this.testBool = testBool;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testMethod_args args = new testMethod_args();
        args.setTestLong(testLong);
        args.setTestString(testString);
        args.setTestBool(testBool);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.effyroth.core.structs.TestObject getResult() throws com.effyroth.core.exceptions.TestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testMethod();
      }
    }

    public void testPing(org.apache.thrift.async.AsyncMethodCallback<testPing_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testPing_call method_call = new testPing_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testPing_call extends org.apache.thrift.async.TAsyncMethodCall {
      public testPing_call(org.apache.thrift.async.AsyncMethodCallback<testPing_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testPing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testPing_args args = new testPing_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testPing();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("testMethod", new testMethod());
      processMap.put("testPing", new testPing());
      return processMap;
    }

    private static class testMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testMethod_args> {
      public testMethod() {
        super("testMethod");
      }

      protected testMethod_args getEmptyArgsInstance() {
        return new testMethod_args();
      }

      protected testMethod_result getResult(I iface, testMethod_args args) throws org.apache.thrift.TException {
        testMethod_result result = new testMethod_result();
        try {
          result.success = iface.testMethod(args.testLong, args.testString, args.testBool);
        } catch (com.effyroth.core.exceptions.TestException te) {
          result.te = te;
        }
        return result;
      }
    }

    private static class testPing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testPing_args> {
      public testPing() {
        super("testPing");
      }

      protected testPing_args getEmptyArgsInstance() {
        return new testPing_args();
      }

      protected testPing_result getResult(I iface, testPing_args args) throws org.apache.thrift.TException {
        testPing_result result = new testPing_result();
        result.success = iface.testPing();
        return result;
      }
    }

  }

  public static class testMethod_args implements org.apache.thrift.TBase<testMethod_args, testMethod_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMethod_args");

    private static final org.apache.thrift.protocol.TField TEST_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("testLong", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TEST_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("testString", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TEST_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("testBool", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testMethod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testMethod_argsTupleSchemeFactory());
    }

    public long testLong; // required
    public String testString; // required
    public boolean testBool; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEST_LONG((short)1, "testLong"),
      TEST_STRING((short)2, "testString"),
      TEST_BOOL((short)3, "testBool");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEST_LONG
            return TEST_LONG;
          case 2: // TEST_STRING
            return TEST_STRING;
          case 3: // TEST_BOOL
            return TEST_BOOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TESTLONG_ISSET_ID = 0;
    private static final int __TESTBOOL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEST_LONG, new org.apache.thrift.meta_data.FieldMetaData("testLong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TEST_STRING, new org.apache.thrift.meta_data.FieldMetaData("testString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TEST_BOOL, new org.apache.thrift.meta_data.FieldMetaData("testBool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testMethod_args.class, metaDataMap);
    }

    public testMethod_args() {
    }

    public testMethod_args(
      long testLong,
      String testString,
      boolean testBool)
    {
      this();
      this.testLong = testLong;
      setTestLongIsSet(true);
      this.testString = testString;
      this.testBool = testBool;
      setTestBoolIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testMethod_args(testMethod_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.testLong = other.testLong;
      if (other.isSetTestString()) {
        this.testString = other.testString;
      }
      this.testBool = other.testBool;
    }

    public testMethod_args deepCopy() {
      return new testMethod_args(this);
    }

    @Override
    public void clear() {
      setTestLongIsSet(false);
      this.testLong = 0;
      this.testString = null;
      setTestBoolIsSet(false);
      this.testBool = false;
    }

    public long getTestLong() {
      return this.testLong;
    }

    public testMethod_args setTestLong(long testLong) {
      this.testLong = testLong;
      setTestLongIsSet(true);
      return this;
    }

    public void unsetTestLong() {
      __isset_bit_vector.clear(__TESTLONG_ISSET_ID);
    }

    /** Returns true if field testLong is set (has been assigned a value) and false otherwise */
    public boolean isSetTestLong() {
      return __isset_bit_vector.get(__TESTLONG_ISSET_ID);
    }

    public void setTestLongIsSet(boolean value) {
      __isset_bit_vector.set(__TESTLONG_ISSET_ID, value);
    }

    public String getTestString() {
      return this.testString;
    }

    public testMethod_args setTestString(String testString) {
      this.testString = testString;
      return this;
    }

    public void unsetTestString() {
      this.testString = null;
    }

    /** Returns true if field testString is set (has been assigned a value) and false otherwise */
    public boolean isSetTestString() {
      return this.testString != null;
    }

    public void setTestStringIsSet(boolean value) {
      if (!value) {
        this.testString = null;
      }
    }

    public boolean isTestBool() {
      return this.testBool;
    }

    public testMethod_args setTestBool(boolean testBool) {
      this.testBool = testBool;
      setTestBoolIsSet(true);
      return this;
    }

    public void unsetTestBool() {
      __isset_bit_vector.clear(__TESTBOOL_ISSET_ID);
    }

    /** Returns true if field testBool is set (has been assigned a value) and false otherwise */
    public boolean isSetTestBool() {
      return __isset_bit_vector.get(__TESTBOOL_ISSET_ID);
    }

    public void setTestBoolIsSet(boolean value) {
      __isset_bit_vector.set(__TESTBOOL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEST_LONG:
        if (value == null) {
          unsetTestLong();
        } else {
          setTestLong((Long)value);
        }
        break;

      case TEST_STRING:
        if (value == null) {
          unsetTestString();
        } else {
          setTestString((String)value);
        }
        break;

      case TEST_BOOL:
        if (value == null) {
          unsetTestBool();
        } else {
          setTestBool((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEST_LONG:
        return Long.valueOf(getTestLong());

      case TEST_STRING:
        return getTestString();

      case TEST_BOOL:
        return Boolean.valueOf(isTestBool());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEST_LONG:
        return isSetTestLong();
      case TEST_STRING:
        return isSetTestString();
      case TEST_BOOL:
        return isSetTestBool();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testMethod_args)
        return this.equals((testMethod_args)that);
      return false;
    }

    public boolean equals(testMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_testLong = true;
      boolean that_present_testLong = true;
      if (this_present_testLong || that_present_testLong) {
        if (!(this_present_testLong && that_present_testLong))
          return false;
        if (this.testLong != that.testLong)
          return false;
      }

      boolean this_present_testString = true && this.isSetTestString();
      boolean that_present_testString = true && that.isSetTestString();
      if (this_present_testString || that_present_testString) {
        if (!(this_present_testString && that_present_testString))
          return false;
        if (!this.testString.equals(that.testString))
          return false;
      }

      boolean this_present_testBool = true;
      boolean that_present_testBool = true;
      if (this_present_testBool || that_present_testBool) {
        if (!(this_present_testBool && that_present_testBool))
          return false;
        if (this.testBool != that.testBool)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testMethod_args typedOther = (testMethod_args)other;

      lastComparison = Boolean.valueOf(isSetTestLong()).compareTo(typedOther.isSetTestLong());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTestLong()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testLong, typedOther.testLong);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTestString()).compareTo(typedOther.isSetTestString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTestString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testString, typedOther.testString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTestBool()).compareTo(typedOther.isSetTestBool());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTestBool()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testBool, typedOther.testBool);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testMethod_args(");
      boolean first = true;

      sb.append("testLong:");
      sb.append(this.testLong);
      first = false;
      if (!first) sb.append(", ");
      sb.append("testString:");
      if (this.testString == null) {
        sb.append("null");
      } else {
        sb.append(this.testString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("testBool:");
      sb.append(this.testBool);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testMethod_argsStandardSchemeFactory implements SchemeFactory {
      public testMethod_argsStandardScheme getScheme() {
        return new testMethod_argsStandardScheme();
      }
    }

    private static class testMethod_argsStandardScheme extends StandardScheme<testMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEST_LONG
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.testLong = iprot.readI64();
                struct.setTestLongIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEST_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.testString = iprot.readString();
                struct.setTestStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TEST_BOOL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.testBool = iprot.readBool();
                struct.setTestBoolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEST_LONG_FIELD_DESC);
        oprot.writeI64(struct.testLong);
        oprot.writeFieldEnd();
        if (struct.testString != null) {
          oprot.writeFieldBegin(TEST_STRING_FIELD_DESC);
          oprot.writeString(struct.testString);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TEST_BOOL_FIELD_DESC);
        oprot.writeBool(struct.testBool);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testMethod_argsTupleSchemeFactory implements SchemeFactory {
      public testMethod_argsTupleScheme getScheme() {
        return new testMethod_argsTupleScheme();
      }
    }

    private static class testMethod_argsTupleScheme extends TupleScheme<testMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTestLong()) {
          optionals.set(0);
        }
        if (struct.isSetTestString()) {
          optionals.set(1);
        }
        if (struct.isSetTestBool()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTestLong()) {
          oprot.writeI64(struct.testLong);
        }
        if (struct.isSetTestString()) {
          oprot.writeString(struct.testString);
        }
        if (struct.isSetTestBool()) {
          oprot.writeBool(struct.testBool);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.testLong = iprot.readI64();
          struct.setTestLongIsSet(true);
        }
        if (incoming.get(1)) {
          struct.testString = iprot.readString();
          struct.setTestStringIsSet(true);
        }
        if (incoming.get(2)) {
          struct.testBool = iprot.readBool();
          struct.setTestBoolIsSet(true);
        }
      }
    }

  }

  public static class testMethod_result implements org.apache.thrift.TBase<testMethod_result, testMethod_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testMethod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testMethod_resultTupleSchemeFactory());
    }

    public com.effyroth.core.structs.TestObject success; // required
    public com.effyroth.core.exceptions.TestException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      TE((short)1, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.effyroth.core.structs.TestObject.class)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testMethod_result.class, metaDataMap);
    }

    public testMethod_result() {
    }

    public testMethod_result(
      com.effyroth.core.structs.TestObject success,
      com.effyroth.core.exceptions.TestException te)
    {
      this();
      this.success = success;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testMethod_result(testMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.effyroth.core.structs.TestObject(other.success);
      }
      if (other.isSetTe()) {
        this.te = new com.effyroth.core.exceptions.TestException(other.te);
      }
    }

    public testMethod_result deepCopy() {
      return new testMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.te = null;
    }

    public com.effyroth.core.structs.TestObject getSuccess() {
      return this.success;
    }

    public testMethod_result setSuccess(com.effyroth.core.structs.TestObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.effyroth.core.exceptions.TestException getTe() {
      return this.te;
    }

    public testMethod_result setTe(com.effyroth.core.exceptions.TestException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.effyroth.core.structs.TestObject)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.effyroth.core.exceptions.TestException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testMethod_result)
        return this.equals((testMethod_result)that);
      return false;
    }

    public boolean equals(testMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testMethod_result typedOther = (testMethod_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testMethod_resultStandardSchemeFactory implements SchemeFactory {
      public testMethod_resultStandardScheme getScheme() {
        return new testMethod_resultStandardScheme();
      }
    }

    private static class testMethod_resultStandardScheme extends StandardScheme<testMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.effyroth.core.structs.TestObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.effyroth.core.exceptions.TestException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testMethod_resultTupleSchemeFactory implements SchemeFactory {
      public testMethod_resultTupleScheme getScheme() {
        return new testMethod_resultTupleScheme();
      }
    }

    private static class testMethod_resultTupleScheme extends TupleScheme<testMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetTe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.effyroth.core.structs.TestObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.te = new com.effyroth.core.exceptions.TestException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class testPing_args implements org.apache.thrift.TBase<testPing_args, testPing_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testPing_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testPing_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testPing_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testPing_args.class, metaDataMap);
    }

    public testPing_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testPing_args(testPing_args other) {
    }

    public testPing_args deepCopy() {
      return new testPing_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testPing_args)
        return this.equals((testPing_args)that);
      return false;
    }

    public boolean equals(testPing_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testPing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testPing_args typedOther = (testPing_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testPing_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testPing_argsStandardSchemeFactory implements SchemeFactory {
      public testPing_argsStandardScheme getScheme() {
        return new testPing_argsStandardScheme();
      }
    }

    private static class testPing_argsStandardScheme extends StandardScheme<testPing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testPing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testPing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testPing_argsTupleSchemeFactory implements SchemeFactory {
      public testPing_argsTupleScheme getScheme() {
        return new testPing_argsTupleScheme();
      }
    }

    private static class testPing_argsTupleScheme extends TupleScheme<testPing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testPing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testPing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class testPing_result implements org.apache.thrift.TBase<testPing_result, testPing_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testPing_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testPing_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testPing_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testPing_result.class, metaDataMap);
    }

    public testPing_result() {
    }

    public testPing_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testPing_result(testPing_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public testPing_result deepCopy() {
      return new testPing_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public testPing_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testPing_result)
        return this.equals((testPing_result)that);
      return false;
    }

    public boolean equals(testPing_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testPing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testPing_result typedOther = (testPing_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testPing_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testPing_resultStandardSchemeFactory implements SchemeFactory {
      public testPing_resultStandardScheme getScheme() {
        return new testPing_resultStandardScheme();
      }
    }

    private static class testPing_resultStandardScheme extends StandardScheme<testPing_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testPing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testPing_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testPing_resultTupleSchemeFactory implements SchemeFactory {
      public testPing_resultTupleScheme getScheme() {
        return new testPing_resultTupleScheme();
      }
    }

    private static class testPing_resultTupleScheme extends TupleScheme<testPing_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testPing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testPing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
