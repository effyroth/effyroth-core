/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.effyroth.core.structs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestObject implements org.apache.thrift.TBase<TestObject, TestObject._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestObject");

  private static final org.apache.thrift.protocol.TField TEST_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("testString", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEST_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("testBool", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField TEST_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("testLong", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestObjectTupleSchemeFactory());
  }

  public String testString; // required
  public boolean testBool; // optional
  public long testLong; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEST_STRING((short)1, "testString"),
    TEST_BOOL((short)2, "testBool"),
    TEST_LONG((short)3, "testLong");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEST_STRING
          return TEST_STRING;
        case 2: // TEST_BOOL
          return TEST_BOOL;
        case 3: // TEST_LONG
          return TEST_LONG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TESTBOOL_ISSET_ID = 0;
  private static final int __TESTLONG_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.TEST_BOOL,_Fields.TEST_LONG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEST_STRING, new org.apache.thrift.meta_data.FieldMetaData("testString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEST_BOOL, new org.apache.thrift.meta_data.FieldMetaData("testBool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEST_LONG, new org.apache.thrift.meta_data.FieldMetaData("testLong", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestObject.class, metaDataMap);
  }

  public TestObject() {
  }

  public TestObject(
    String testString)
  {
    this();
    this.testString = testString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestObject(TestObject other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTestString()) {
      this.testString = other.testString;
    }
    this.testBool = other.testBool;
    this.testLong = other.testLong;
  }

  public TestObject deepCopy() {
    return new TestObject(this);
  }

  @Override
  public void clear() {
    this.testString = null;
    setTestBoolIsSet(false);
    this.testBool = false;
    setTestLongIsSet(false);
    this.testLong = 0;
  }

  public String getTestString() {
    return this.testString;
  }

  public TestObject setTestString(String testString) {
    this.testString = testString;
    return this;
  }

  public void unsetTestString() {
    this.testString = null;
  }

  /** Returns true if field testString is set (has been assigned a value) and false otherwise */
  public boolean isSetTestString() {
    return this.testString != null;
  }

  public void setTestStringIsSet(boolean value) {
    if (!value) {
      this.testString = null;
    }
  }

  public boolean isTestBool() {
    return this.testBool;
  }

  public TestObject setTestBool(boolean testBool) {
    this.testBool = testBool;
    setTestBoolIsSet(true);
    return this;
  }

  public void unsetTestBool() {
    __isset_bit_vector.clear(__TESTBOOL_ISSET_ID);
  }

  /** Returns true if field testBool is set (has been assigned a value) and false otherwise */
  public boolean isSetTestBool() {
    return __isset_bit_vector.get(__TESTBOOL_ISSET_ID);
  }

  public void setTestBoolIsSet(boolean value) {
    __isset_bit_vector.set(__TESTBOOL_ISSET_ID, value);
  }

  public long getTestLong() {
    return this.testLong;
  }

  public TestObject setTestLong(long testLong) {
    this.testLong = testLong;
    setTestLongIsSet(true);
    return this;
  }

  public void unsetTestLong() {
    __isset_bit_vector.clear(__TESTLONG_ISSET_ID);
  }

  /** Returns true if field testLong is set (has been assigned a value) and false otherwise */
  public boolean isSetTestLong() {
    return __isset_bit_vector.get(__TESTLONG_ISSET_ID);
  }

  public void setTestLongIsSet(boolean value) {
    __isset_bit_vector.set(__TESTLONG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEST_STRING:
      if (value == null) {
        unsetTestString();
      } else {
        setTestString((String)value);
      }
      break;

    case TEST_BOOL:
      if (value == null) {
        unsetTestBool();
      } else {
        setTestBool((Boolean)value);
      }
      break;

    case TEST_LONG:
      if (value == null) {
        unsetTestLong();
      } else {
        setTestLong((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEST_STRING:
      return getTestString();

    case TEST_BOOL:
      return Boolean.valueOf(isTestBool());

    case TEST_LONG:
      return Long.valueOf(getTestLong());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEST_STRING:
      return isSetTestString();
    case TEST_BOOL:
      return isSetTestBool();
    case TEST_LONG:
      return isSetTestLong();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestObject)
      return this.equals((TestObject)that);
    return false;
  }

  public boolean equals(TestObject that) {
    if (that == null)
      return false;

    boolean this_present_testString = true && this.isSetTestString();
    boolean that_present_testString = true && that.isSetTestString();
    if (this_present_testString || that_present_testString) {
      if (!(this_present_testString && that_present_testString))
        return false;
      if (!this.testString.equals(that.testString))
        return false;
    }

    boolean this_present_testBool = true && this.isSetTestBool();
    boolean that_present_testBool = true && that.isSetTestBool();
    if (this_present_testBool || that_present_testBool) {
      if (!(this_present_testBool && that_present_testBool))
        return false;
      if (this.testBool != that.testBool)
        return false;
    }

    boolean this_present_testLong = true && this.isSetTestLong();
    boolean that_present_testLong = true && that.isSetTestLong();
    if (this_present_testLong || that_present_testLong) {
      if (!(this_present_testLong && that_present_testLong))
        return false;
      if (this.testLong != that.testLong)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TestObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TestObject typedOther = (TestObject)other;

    lastComparison = Boolean.valueOf(isSetTestString()).compareTo(typedOther.isSetTestString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testString, typedOther.testString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestBool()).compareTo(typedOther.isSetTestBool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestBool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testBool, typedOther.testBool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestLong()).compareTo(typedOther.isSetTestLong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestLong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testLong, typedOther.testLong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestObject(");
    boolean first = true;

    sb.append("testString:");
    if (this.testString == null) {
      sb.append("null");
    } else {
      sb.append(this.testString);
    }
    first = false;
    if (isSetTestBool()) {
      if (!first) sb.append(", ");
      sb.append("testBool:");
      sb.append(this.testBool);
      first = false;
    }
    if (isSetTestLong()) {
      if (!first) sb.append(", ");
      sb.append("testLong:");
      sb.append(this.testLong);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (testString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'testString' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestObjectStandardSchemeFactory implements SchemeFactory {
    public TestObjectStandardScheme getScheme() {
      return new TestObjectStandardScheme();
    }
  }

  private static class TestObjectStandardScheme extends StandardScheme<TestObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEST_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.testString = iprot.readString();
              struct.setTestStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEST_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.testBool = iprot.readBool();
              struct.setTestBoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEST_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.testLong = iprot.readI64();
              struct.setTestLongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.testString != null) {
        oprot.writeFieldBegin(TEST_STRING_FIELD_DESC);
        oprot.writeString(struct.testString);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTestBool()) {
        oprot.writeFieldBegin(TEST_BOOL_FIELD_DESC);
        oprot.writeBool(struct.testBool);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTestLong()) {
        oprot.writeFieldBegin(TEST_LONG_FIELD_DESC);
        oprot.writeI64(struct.testLong);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestObjectTupleSchemeFactory implements SchemeFactory {
    public TestObjectTupleScheme getScheme() {
      return new TestObjectTupleScheme();
    }
  }

  private static class TestObjectTupleScheme extends TupleScheme<TestObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.testString);
      BitSet optionals = new BitSet();
      if (struct.isSetTestBool()) {
        optionals.set(0);
      }
      if (struct.isSetTestLong()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTestBool()) {
        oprot.writeBool(struct.testBool);
      }
      if (struct.isSetTestLong()) {
        oprot.writeI64(struct.testLong);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.testString = iprot.readString();
      struct.setTestStringIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.testBool = iprot.readBool();
        struct.setTestBoolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.testLong = iprot.readI64();
        struct.setTestLongIsSet(true);
      }
    }
  }

}

